name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up AWS CLI credentials (corrected 'aws-region' input)
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: "ap-south-1"  # Correct input for AWS region

    # Step 3: Install kubectl
    - name: Install kubectl
      run: |
        curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

    # Step 4: Configure kubectl to access your private EKS cluster
    - name: Update kubeconfig
      run: |
        aws eks --region ap-south-1 update-kubeconfig --name vishnu-eks-sanjay

    # Step 5: Verify kubectl configuration
    - name: Verify kubectl configuration
      run: kubectl get nodes

    # Step 6: Build Docker image for Flask Backend
    - name: Build Docker image for Flask Backend
      run: |
        cd flask-backend
        docker build -t flask-backend .

    # Step 7: Build Docker image for React Frontend
    - name: Build Docker image for React Frontend
      run: |
        cd reactjs-frontend
        docker build -t reactjs-frontend .

    # Step 7: Push Docker image for Flask Backend to ECR
    - name: Push Docker image to ECR for Flask Backend
      run: |
        # Login to AWS ECR
        docker login -u AWS -p $(aws ecr get-login-password --region $AWS_REGION) 476356830795.dkr.ecr.ap-south-1.amazonaws.com
        # Tag the image with the ECR repository URI
        docker tag flask-backend:latest 476356830795.dkr.ecr.ap-south-1.amazonaws.com/flask-backend:latest
        # Push the image to the ECR repository
        docker push 476356830795.dkr.ecr.ap-south-1.amazonaws.com/flask-backend:latest

    # Step 8: Push Docker image for React Frontend to ECR
    - name: Push Docker image to ECR for React Frontend
      run: |
        # Login to AWS ECR
        docker login -u AWS -p $(aws ecr get-login-password --region $AWS_REGION) 476356830795.dkr.ecr.ap-south-1.amazonaws.com
        # Tag the image with the ECR repository URI
        docker tag reactjs-frontend:latest 476356830795.dkr.ecr.ap-south-1.amazonaws.com/reactjs-frontend:latest
        # Push the image to the ECR repository
        docker push 476356830795.dkr.ecr.ap-south-1.amazonaws.com/reactjs-frontend:latest


    # Step 10: Install Helm for Kubernetes Deployment
    - name: Install Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
        helm version

    # Step 11: Deploy Flask Backend using Helm
    - name: Deploy Flask Backend to Kubernetes using Helm
      run: |
        helm upgrade --inst
