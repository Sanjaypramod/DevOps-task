name: CI/CD Pipeline

# Trigger the pipeline only on push or pull request events to master branch
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Step to set up Python for the Flask backend
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    # Install Flask dependencies
    - name: Install dependencies for Flask
      run: |
        cd flask-backend
        python -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt

    # Step to set up Node.js for React frontend
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    # Install React dependencies
    - name: Install dependencies for React
      run: |
        cd reactjs-frontend
        npm install

    # Build the React app
    - name: Build React app
      run: |
        cd reactjs-frontend
        npm run build

    # Docker build for Flask backend
    - name: Build Flask Docker image
      run: |
        cd flask-backend
        docker build -t flask-backend .

    # Docker build for React frontend
    - name: Build React Docker image
      run: |
        cd reactjs-frontend
        docker build -t reactjs-frontend .

    # Push Docker images to Docker Hub (or any other registry)
    - name: Push Docker images
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker tag flask-backend ${{ secrets.DOCKER_USERNAME }}/flask-backend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/flask-backend:latest
        docker tag reactjs-frontend ${{ secrets.DOCKER_USERNAME }}/reactjs-frontend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/reactjs-frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
        helm version

    - name: Install kubectl
      uses: azure/setup-kubectl@v1

    # Set the KUBECONFIG variable using the GitHub secret or your context
    - name: Set up Kube config
      run: |
        echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml

    # Deploy using Helm charts
    - name: Deploy using Helm
      run: |
        helm upgrade --install my-app ./k8s/helmchart-twotierapp --values ./k8s/helmchart-twotierapp/values.yaml
